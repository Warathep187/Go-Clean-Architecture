// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	entities "go-clean-arch/entities"

	mock "github.com/stretchr/testify/mock"
)

// BlogRepository is an autogenerated mock type for the BlogRepository type
type BlogRepository struct {
	mock.Mock
}

// CreateBlog provides a mock function with given fields: dto
func (_m *BlogRepository) CreateBlog(dto *entities.CreateBlogData) error {
	ret := _m.Called(dto)

	if len(ret) == 0 {
		panic("no return value specified for CreateBlog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.CreateBlogData) error); ok {
		r0 = rf(dto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBlogs provides a mock function with given fields:
func (_m *BlogRepository) DeleteBlogs() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeleteBlogs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBlogs provides a mock function with given fields:
func (_m *BlogRepository) GetBlogs() ([]*entities.Blog, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBlogs")
	}

	var r0 []*entities.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.Blog, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.Blog); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBlogRepository creates a new instance of BlogRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlogRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlogRepository {
	mock := &BlogRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

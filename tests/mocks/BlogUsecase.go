// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	entities "go-clean-arch/entities"

	mock "github.com/stretchr/testify/mock"

	models "go-clean-arch/models"
)

// BlogUsecase is an autogenerated mock type for the BlogUsecase type
type BlogUsecase struct {
	mock.Mock
}

// CreateBlog provides a mock function with given fields: data
func (_m *BlogUsecase) CreateBlog(data *models.CreateBlogDTO) (int, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for CreateBlog")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.CreateBlogDTO) (int, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(*models.CreateBlogDTO) int); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*models.CreateBlogDTO) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllBlogs provides a mock function with given fields:
func (_m *BlogUsecase) GetAllBlogs() ([]*entities.Blog, int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllBlogs")
	}

	var r0 []*entities.Blog
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func() ([]*entities.Blog, int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.Blog); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func() int); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewBlogUsecase creates a new instance of BlogUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlogUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlogUsecase {
	mock := &BlogUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
